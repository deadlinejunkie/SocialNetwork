name: Manual Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "latest=$latest_tag" >> $GITHUB_OUTPUT

      - name: Get merged PRs since last tag
        id: prs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "closed",
              sort: "updated",
              direction: "desc",
              per_page: 100,
            });

            // filter PRs merged after last tag commit
            const { execSync } = require("child_process");
            let lastTag = "${{ steps.get_tag.outputs.latest }}";
            let lastSha = "";
            try {
              lastSha = execSync(`git rev-list -n 1 ${lastTag}`).toString().trim();
            } catch(e) {
              lastSha = "";
            }

            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: "master",
            });
            const lastIndex = lastSha
              ? commits.findIndex(c => c.sha.startsWith(lastSha))
              : commits.length;

            const merged = pulls.filter(pr =>
              pr.merged_at &&
              commits.findIndex(c => c.sha.startsWith(pr.merge_commit_sha)) < lastIndex
            );

            core.setOutput("prs", JSON.stringify(merged));

      - name: Determine next version
        id: bump
        run: |
          version="${{ steps.get_tag.outputs.latest }}"
          major=$(echo $version | cut -d. -f1)
          minor=$(echo $version | cut -d. -f2)
          patch=$(echo $version | cut -d. -f3)

          bump="patch"
          prs=$(echo '${{ steps.prs.outputs.prs }}' | jq -r '.[].title')
          while IFS= read -r title; do
            if [[ "$title" == *"(major)"* ]]; then
              bump="major"
              break
            elif [[ "$title" == *"(minor)"* ]]; then
              bump="minor"
            fi
          done <<< "$prs"

          if [[ "$bump" == "major" ]]; then
            major=$((major+1)); minor=0; patch=0
          elif [[ "$bump" == "minor" ]]; then
            minor=$((minor+1)); patch=0
          else
            patch=$((patch+1))
          fi

          new_version="$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Format release notes
        id: notes
        run: |
          prs='${{ steps.prs.outputs.prs }}'
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "### Changes since ${{ steps.get_tag.outputs.latest }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$prs" | jq -r '.[] | "- PR #\(.number): \(.title) (@\(.user.login))"' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.new_version }}
          name: ${{ steps.bump.outputs.new_version }}
          body: ${{ steps.notes.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
